package TrustAtHsH::Irondemo::Modules::VulnerabilityDetected;

use 5.16.0;
use strict;
use warnings;
use Carp qw(croak);
use File::Spec;
use File::Basename;
use lib '../../../';
use parent 'TrustAtHsH::Irondemo::AbstractIfmapCliModule';


my $IP_ADDRESS = "ip-address";
my $EVENT_NAME = "event-name";
my $EVENT_DISCOVERER_ID = "discoverer-id";
my $IFMAP_USER = 'ifmap-user';
my $IFMAP_PASS = 'ifmap-pass';

my $EVENT_MAGNITUDE = "event-magnitude";
my $EVENT_CONFIDENCE = "event-confidence";
my $EVENT_SIGNIFICANCE = "event-significance";
my $VULNERABILITY_URI = "vulnerability-uri";

my @REQUIRED_ARGS = (
	$IP_ADDRESS, $EVENT_NAME, $EVENT_DISCOVERER_ID, $IFMAP_USER, $IFMAP_PASS);


### INSTANCE METHOD ###
# Purpose     :
# Returns     : True value on success, false value on failure
# Parameters  : None
# Comments    :
sub execute {
	my $self = shift;
	my $data = $self->{'data'};

	my $result = 1;

	my @argsList = ("ipv4", $data->{$IP_ADDRESS}, $data->{$EVENT_NAME}, $data->{$EVENT_DISCOVERER_ID},
					"--magnitude", $data->{$EVENT_MAGNITUDE},
					"--confidence", $data->{$EVENT_CONFIDENCE},
					"--significance", $data->{$EVENT_SIGNIFICANCE},
					"--type", "cve",
					"--vulnerability-uri", $data->{$VULNERABILITY_URI});
	my $connectionArgs = {
		"ifmap-user" => $data->{$IFMAP_USER},
		"ifmap-pass" => $data->{$IFMAP_PASS}
	};

	$result &= $self->call_ifmap_cli({
			'cli_tool' => "event",
			'mode' => "update",
			'args_list' => \@argsList,
			'connection_args' => $connectionArgs});

	return $result;
}


### INSTANCE METHOD ###
# Purpose     :
# Returns     :
# Parameters  :
# Comments    :
sub get_required_arguments {
	my $self = shift;

	return @REQUIRED_ARGS;
}


### INTERNAL UTILITY ###
# Purpose     :
# Returns     :
# Parameters  : data ->
#                 ifmap-user          ->(optional)
#                 ifmap-pass          ->(optional)
#                 ifmap-url           ->(optional)
#                 ifmap-keystore-path ->(optional)
#                 ifmap-keystore-pass ->(optional)
#                 ip-address          ->
#                 event-name          ->
#                 discoverer-id       ->
#                 event-magnitude     ->(optional)
#                 event-confidence    ->(optional)
#                 event-significance  ->(optional)
#                 vulnerability-uri   ->(optional)
#
#
# Comments    : Override, called from parent's constructor
sub _init {
	my $self = shift;
	my $args = shift;

	while ( my ($key, $val) = each %{$args} ) {
		$self->{'data'}->{$key} = $val;
	}

	$self->{'data'}->{$EVENT_MAGNITUDE}    = "100"      unless defined $self->{'data'}->{$EVENT_MAGNITUDE};
	$self->{'data'}->{$EVENT_CONFIDENCE}   = "100"      unless defined $self->{'data'}->{$EVENT_CONFIDENCE};
	$self->{'data'}->{$EVENT_SIGNIFICANCE} = "critical" unless defined $self->{'data'}->{$EVENT_SIGNIFICANCE};
	$self->{'data'}->{$VULNERABILITY_URI}  = "unknown"  unless defined $self->{'data'}->{$VULNERABILITY_URI};
}

1;