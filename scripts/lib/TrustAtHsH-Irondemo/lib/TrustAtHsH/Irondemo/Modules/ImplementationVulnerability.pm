package TrustAtHsH::Irondemo::Modules::ImplementationVulnerability;

use 5.16.0;
use strict;
use warnings;
use Carp qw(croak);
use lib '../../../';
use TrustAtHsH::Irondemo::SimuUtilities;
use parent 'TrustAtHsH::Irondemo::ExtMeta';

my $IFMAP_USER    = 'ifmap-user';
my $IFMAP_PASS    = 'ifmap-pass';
my $SERVICE       = 'service';
my $HOST          = 'host';
my $PORT          = 'port';
my $IMPL_NAME     = 'impl-name';
my $IMPL_VERSION  = 'impl-version';
my $IMPL_PLATFORM = 'impl-platform';
my $IMPL_PATCH    = 'impl-patch';
my $VULN_TYPE     = 'vuln-type';
my $VULN_ID       = 'vuln-id';
my $VULN_SEV      = 'vuln-severity';

my @REQUIRED_ARGS = ( $IMPL_NAME, $IMPL_VERSION, $VULN_TYPE, $VULN_ID);

### INSTANCE METHOD ###
# Purpose     :
# Returns     : True value on success, false value on failure
# Parameters  : None
# Comments    :
sub execute {
	my $self = shift;
	my $data = $self->{'data'};
	my $result = 1;
	
	my ( %implementation, %vulnerability, %service, %meta_impl_vuln, %meta_service_impl );
	
	%implementation = ( extended =>
	  TrustAtHsH::Irondemo::SimuUtilities->create_string_id_implementation({
	    name          => $data->{$IMPL_NAME},
	    version       => $data->{$IMPL_VERSION},
	    local_version => $data->{$IMPL_PATCH},
	    platform      => $data->{$IMPL_PLATFORM}
	  })
	);
	
	%vulnerability = ( extended =>
	  TrustAtHsH::Irondemo::SimuUtilities->create_string_id_vulnerability({
	    type     => $data->{$VULN_TYPE},
	    id       => $data->{$VULN_ID},
	    severity => $data->{$VULN_SEV},
	  })
	);
	
	%meta_impl_vuln = ( extended => TrustAtHsH::Irondemo::SimuUtilities->create_string_meta_implementation_vulnerability() );
	
	$result &= $self->publish( $data->{$IFMAP_USER}, $data->{$IFMAP_PASS}, \%implementation, \%meta_impl_vuln, \%vulnerability );
	
	if ( $data->{$SERVICE} ) {
		%service = ( extended =>
		  TrustAtHsH::Irondemo::SimuUtilities->create_string_id_service({
		    type => $data->{$SERVICE},
		    port => $data->{$PORT},
		    name => $data->{$HOST},
		  })
		);
		
		%meta_service_impl = ( extended => TrustAtHsH::Irondemo::SimuUtilities->create_string_meta_service_implementation());
		
		$result &= $self->publish( $data->{$IFMAP_USER}, $data->{$IFMAP_PASS}, \%service, \%meta_service_impl, \%implementation );
	}
	
	return $result;
}

### INSTANCE METHOD ###
# Purpose     :
# Returns     :
# Parameters  :
# Comments    :
sub get_required_arguments {
	my $self = shift;
	
	return @REQUIRED_ARGS;
}

### INTERNAL UTILITY ###
# Purpose     :
# Returns     :
# Parameters  : data ->
#                 ifmap-user          ->(optional)
#                 ifmap-pass          ->(optional)
#                 ifmap-url           ->(optional)
#                 ifmap-keystore-path ->(optional)
#                 ifmap-keystore-pass ->(optional)
# Comments    : Override, called from parent's constructor
sub _init {
	my $self = shift;
	my $args = shift;

	while ( my ($key, $val) = each %{$args} ) {
		$self->{'data'}->{$key} = $val;
	}
}

1;